

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (11 April 2023 19:13:52) as /home/rpetey317/Code/algoritmos3/Cuis/CuisUniversity-5706.image!


!testRun: #StringCuisUniversityExtentionsTest #test01_IfBeginsWith_a_AndContinuesWithUppercase_RemovesTheA stamp: 'rabg 4/11/2023 21:26:33'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test02_IfBeginsWith_a_AndContinuesWithLowercase_Adds_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:33'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test03_IfBeginsWith_an_AndContinuesWithUppercase_RemovesTheAn stamp: 'rabg 4/11/2023 21:26:33'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test04_IfBeginsWith_an_AndContinuesWithLowercase_Adds_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:33'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test05_IfBeginsWith_un_AndContinuesWithUppercase_RemovesThe_un stamp: 'rabg 4/11/2023 21:26:33'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test06_IfBeginsWith_un_AndContinuesWithLowercase_Adds_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:33'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test07_IfBeginsWith_una_AndContinuesWithUppercase_RemovesThe_una stamp: 'rabg 4/11/2023 21:26:33'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test08_IfBeginsWith_una_AndContinuesWithLowercase_Adds_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:33'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test08_IfItIsNotTheOtherCases_Add_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:33'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test01_IfBeginsWith_a_AndContinuesWithUppercase_RemovesTheA stamp: 'rabg 4/11/2023 21:26:42'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test02_IfBeginsWith_a_AndContinuesWithLowercase_Adds_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:42'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test03_IfBeginsWith_an_AndContinuesWithUppercase_RemovesTheAn stamp: 'rabg 4/11/2023 21:26:42'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test04_IfBeginsWith_an_AndContinuesWithLowercase_Adds_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:42'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test05_IfBeginsWith_un_AndContinuesWithUppercase_RemovesThe_un stamp: 'rabg 4/11/2023 21:26:42'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test06_IfBeginsWith_un_AndContinuesWithLowercase_Adds_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:42'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test07_IfBeginsWith_una_AndContinuesWithUppercase_RemovesThe_una stamp: 'rabg 4/11/2023 21:26:42'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test08_IfBeginsWith_una_AndContinuesWithLowercase_Adds_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:42'!
PASSED!

!testRun: #StringCuisUniversityExtentionsTest #test08_IfItIsNotTheOtherCases_Add_CHANGE_ME stamp: 'rabg 4/11/2023 21:26:42'!
PASSED!
!DarkColorTheme methodsFor: 'other options' stamp: 'rabg 4/11/2023 21:27:50' prior: 50552569 overrides: 16971040!
roundWindowCorners
	^false! !
!DarkColorTheme methodsFor: 'other options' stamp: 'rabg 4/11/2023 21:28:30' prior: 50604026 overrides: 16971040!
roundWindowCorners
	^true! !

1 class!

1 class superclass!

1 class superclass superclass!

1 class superclass superclass class!

1 class superclass superclass class class!

1 class superclass superclass class class class!

1 class superclass superclass class class class class!

1 class superclass superclass class class class !

1 class superclass superclass class class class superclass!

1 class superclass superclass class class class superclass class!

----QUIT----(11 April 2023 21:36:32) CuisUniversity-5706.image priorSource: 8713034!

----STARTUP---- (14 April 2023 17:47:49) as /home/rpetey317/Code/algoritmos3/Cuis/CuisUniversity-5706.image!


----End fileIn of /home/rpetey317/Code/algoritmos3/Cuis/Code/CombatientesFantasticosPaso2.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:39'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:46:42'!
ERROR!

CombatienteOrcoOlgra
	collaboratorNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoDeDaño'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'CombatienteOrcoOlgra class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:48:35'!
CombatienteOrcoOlgra class
	instanceVariableNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoDeDaño'!

!classDefinition: #CombatienteOrcoOlgra category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:48:35'!
DenotativeObject subclass: #CombatienteOrcoOlgra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'CombatienteOrcoOlgra class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:48:35'!
CombatienteOrcoOlgra class
	instanceVariableNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoDeDaño'!

bonoDeDaño!

CombatienteOrcoMankrik
	collaboratorNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoDeDaño'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'CombatienteOrcoMankrik class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:50:34'!
CombatienteOrcoMankrik class
	instanceVariableNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoDeDaño'!

!classDefinition: #CombatienteOrcoMankrik category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:50:34'!
DenotativeObject subclass: #CombatienteOrcoMankrik
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'CombatienteOrcoMankrik class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:50:34'!
CombatienteOrcoMankrik class
	instanceVariableNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoDeDaño'!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:50:56'!
ERROR!
!CombatienteOrcoOlgra class methodsFor: 'combate' stamp: 'rabg 4/14/2023 19:51:49' prior: 50604386!
atacarA: unCombatiente 
	unCombatiente recibirDaño: (dañoAInfligir + bonoDeDaño ).! !
!CombatienteOrcoMankrik class methodsFor: 'combate' stamp: 'rabg 4/14/2023 19:52:04' prior: 50604234!
atacarA: unCombatiente 
	unCombatiente recibirDaño: (dañoAInfligir + bonoDeDaño ).! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:10'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:16'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:52:52'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:12'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:53:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 19:55:21'!
ERROR!

!classDefinition: 'CombatienteOrcoOlgra class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:56:21'!
CombatienteOrcoOlgra class
	instanceVariableNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoPorFuerza'!
!CombatienteOrcoOlgra class methodsFor: 'as yet unclassified' stamp: 'rabg 4/14/2023 19:56:21' prior: 50605921!
atacarA: unCombatiente 
	unCombatiente recibirDaño: (dañoAInfligir + bonoPorFuerza ).! !

!classDefinition: 'CombatienteOrcoMankrik class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:56:34'!
CombatienteOrcoMankrik class
	instanceVariableNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoPorFuerza'!
!CombatienteOrcoMankrik class methodsFor: 'as yet unclassified' stamp: 'rabg 4/14/2023 19:56:34' prior: 50605927!
atacarA: unCombatiente 
	unCombatiente recibirDaño: (dañoAInfligir + bonoPorFuerza ).! !

CombatienteHumanoArthas
	collaboratorNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoPorAgilidad'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'CombatienteHumanoArthas class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:56:48'!
CombatienteHumanoArthas class
	instanceVariableNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoPorAgilidad'!

!classDefinition: #CombatienteHumanoArthas category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:56:48'!
DenotativeObject subclass: #CombatienteHumanoArthas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'CombatienteHumanoArthas class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/14/2023 19:56:48'!
CombatienteHumanoArthas class
	instanceVariableNames: 'enemigos puntosDeVida dañoAInfligir dañoAAbsorber estrategia bonoPorAgilidad'!
!CombatienteHumanoArthas class methodsFor: 'combate' stamp: 'rabg 4/14/2023 19:57:26' prior: 50604128!
recibirDaño:  unaCantidadDeDaño
	| dañoADescontar |
	dañoADescontar := (unaCantidadDeDaño - (dañoAAbsorber - bonoPorAgilidad)) max: 0*pv.
	puntosDeVida := puntosDeVida - dañoADescontar.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:19'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:00:27'!
ERROR!
!CombatienteOrcoMankrik class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:01:49'!
tienePuntosDeVida: unaCantidadDePv
	^puntosDeVida = unaCantidadDePv ! !
!CombatienteOrcoOlgra class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:02:16' prior: 50604440!
tienePuntosDeVida: unaCantidadDePv
	^puntosDeVida = unaCantidadDePv ! !
!CombatienteHumanoArthas class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:02:25'!
tienePuntosDeVida: unaCantidadDePv
	^puntosDeVida = unaCantidadDePv ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:02:36'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:04:07'!
ERROR!
!CombatienteHumanoArthas class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:06:09' prior: 50606113!
recibirDaño:  unaCantidadDeDaño
	| dañoADescontar |
	dañoADescontar := (unaCantidadDeDaño - (dañoAAbsorber + bonoPorAgilidad)) max: 0*pv.
	puntosDeVida := puntosDeVida - dañoADescontar.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:06:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:07:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:07:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:07:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:07:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:07:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:07:25'!
ERROR!
!CombatienteHumanoArthas class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:09:47' prior: 50604090!
atacarA: unCombatiente 
	self shouldBeImplemented ifFalse: 
		[unCombatiente recibirDaño: dañoAInfligir].! !
!CombatienteHumanoArthas class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:10:23'!
estaFueraDeCombate
	^puntosDeVida <= (0*pv)! !
!CombatienteHumanoArthas class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:10:34' prior: 50606272!
atacarA: unCombatiente 
	self estaFueraDeCombate ifFalse: 
		[unCombatiente recibirDaño: dañoAInfligir].! !
!CombatienteOrcoMankrik class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:10:57'!
estaFueraDeCombate
	^puntosDeVida <= (0*pv)! !
!CombatienteOrcoOlgra class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:11:02'!
estaFueraDeCombate
	^puntosDeVida <= (0*pv)! !
!CombatienteOrcoMankrik class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:11:42' prior: 50606076!
atacarA: unCombatiente 
	self estaFueraDeCombate ifFalse: 
		[unCombatiente recibirDaño: dañoAInfligir].! !
!CombatienteOrcoOlgra class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:11:55' prior: 50606061!
atacarA: unCombatiente 
	self estaFueraDeCombate ifFalse: 
		[unCombatiente recibirDaño: dañoAInfligir].! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:12:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:12:04'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:12:04'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:12:04'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:12:04'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:12:04'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:13:01'!
ERROR!
!CombatienteHumanoArthas class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:13:38'!
estaHerido
	^ puntosDeVida < (20*pv)! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:13:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:13:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:13:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:13:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:13:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/14/2023 20:13:56'!
ERROR!
!CombatienteHumanoArthas class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:17:37' prior: 50604095!
enemigos: unConjuntoDeEnemigos
	enemigos := unConjuntoDeEnemigos select: [ :unEnemigo | unEnemigo estaFueraDeCombate ]! !
!CombatienteHumanoArthas class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:17:53' prior: 50606358!
enemigos: unConjuntoDeEnemigos
	enemigos := unConjuntoDeEnemigos! !
!CombatienteOrcoMankrik class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:23:20' prior: 50606301!
atacarA: unCombatiente 
	(self estaFueraDeCombate & unCombatiente estaFueraDeCombate) ifFalse: 
		[unCombatiente recibirDaño: dañoAInfligir].! !
!CombatienteOrcoMankrik class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:23:41' prior: 50606372!
atacarA: unCombatiente 
	[self estaFueraDeCombate & unCombatiente estaFueraDeCombate] ifFalse: 
		[unCombatiente recibirDaño: dañoAInfligir].! !
!CombatienteOrcoMankrik class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:23:52' prior: 50606380!
atacarA: unCombatiente 

	[self estaFueraDeCombate & unCombatiente estaFueraDeCombate] ifFalse: 
		[unCombatiente recibirDaño: dañoAInfligir].! !
!CombatienteOrcoMankrik class methodsFor: 'combate' stamp: 'rabg 4/14/2023 20:24:07' prior: 50606388!
atacarA: unCombatiente 

	[self estaFueraDeCombate | unCombatiente estaFueraDeCombate] ifFalse: 
		[unCombatiente recibirDaño: dañoAInfligir].! !
!CombatienteHumanoArthas class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/14/2023 20:28:53' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := #().
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: -16; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).! !
!CombatienteOrcoMankrik class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/14/2023 20:28:53' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteHumanoArthas; at: 2 put: CombatienteOrcoOlgra; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 10; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm0_1 |
	argm0_1 detectMin: [ :argm0_2 |
		argm0_2 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).! !
!CombatienteOrcoOlgra class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/14/2023 20:28:54' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := #().
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).! !

!methodRemoval: CombatienteHumanoArthas class #initializeCollaboratorsFromFile stamp: 'rabg 4/14/2023 20:28:54'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := #().
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: -16; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).!

!methodRemoval: CombatienteOrcoMankrik class #initializeCollaboratorsFromFile stamp: 'rabg 4/14/2023 20:28:54'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteHumanoArthas; at: 2 put: CombatienteOrcoOlgra; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 10; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm0_1 |
	argm0_1 detectMin: [ :argm0_2 |
		argm0_2 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).!

!methodRemoval: CombatienteOrcoOlgra class #initializeCollaboratorsFromFile stamp: 'rabg 4/14/2023 20:28:54'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := #().
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).!
!CombatienteHumanoArthas class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/14/2023 20:30:12' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := #().
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: -16; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).! !
!CombatienteOrcoMankrik class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/14/2023 20:30:12' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteHumanoArthas; at: 2 put: CombatienteOrcoOlgra; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 10; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm0_1 |
	argm0_1 detectMin: [ :argm0_2 |
		argm0_2 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).! !
!CombatienteOrcoOlgra class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/14/2023 20:30:12' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := #().
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).! !

!methodRemoval: CombatienteHumanoArthas class #initializeCollaboratorsFromFile stamp: 'rabg 4/14/2023 20:30:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := #().
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: -16; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).!

!methodRemoval: CombatienteOrcoMankrik class #initializeCollaboratorsFromFile stamp: 'rabg 4/14/2023 20:30:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteHumanoArthas; at: 2 put: CombatienteOrcoOlgra; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 10; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm0_1 |
	argm0_1 detectMin: [ :argm0_2 |
		argm0_2 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).!

!methodRemoval: CombatienteOrcoOlgra class #initializeCollaboratorsFromFile stamp: 'rabg 4/14/2023 20:30:13'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := #().
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).!

----QUIT----(14 April 2023 21:55:34) CuisUniversity-5706.image priorSource: 8716714!

----STARTUP---- (18 April 2023 16:06:18) as /home/rpetey317/Code/algoritmos3/Cuis/CuisUniversity-5706.image!


!classRemoval: #OrquestadorDeCombatesTest stamp: 'rabg 4/18/2023 16:06:31'!
DenotativeObject subclass: #OrquestadorDeCombatesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #EstrategiasTest stamp: 'rabg 4/18/2023 16:06:31'!
DenotativeObject subclass: #EstrategiasTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatientesTest stamp: 'rabg 4/18/2023 16:06:32'!
DenotativeObject subclass: #CombatientesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatienteOrcoOlgra stamp: 'rabg 4/18/2023 16:06:33'!
DenotativeObject subclass: #CombatienteOrcoOlgra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatienteOrcoMankrik stamp: 'rabg 4/18/2023 16:06:34'!
DenotativeObject subclass: #CombatienteOrcoMankrik
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatienteHumanoArthas stamp: 'rabg 4/18/2023 16:06:34'!
DenotativeObject subclass: #CombatienteHumanoArthas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

----STARTUP---- (18 April 2023 16:07:14) as /home/rpetey317/Code/algoritmos3/Cuis/CuisUniversity-5706.image!


!classRemoval: #OrquestadorDeCombatesTest stamp: 'rabg 4/18/2023 16:07:20'!
DenotativeObject subclass: #OrquestadorDeCombatesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #EstrategiasTest stamp: 'rabg 4/18/2023 16:07:21'!
DenotativeObject subclass: #EstrategiasTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatientesTest stamp: 'rabg 4/18/2023 16:07:21'!
DenotativeObject subclass: #CombatientesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatienteOrcoOlgra stamp: 'rabg 4/18/2023 16:07:22'!
DenotativeObject subclass: #CombatienteOrcoOlgra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatienteOrcoMankrik stamp: 'rabg 4/18/2023 16:07:23'!
DenotativeObject subclass: #CombatienteOrcoMankrik
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatienteHumanoArthas stamp: 'rabg 4/18/2023 16:07:24'!
DenotativeObject subclass: #CombatienteHumanoArthas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

----End fileIn of /home/rpetey317/Code/algoritmos3/Cuis/Code/Ejercicios/Paso 2/Resolucion.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:39'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:08:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:17'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:35'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 16:09:35'!
PASSED!

----QUIT----(18 April 2023 20:15:41) CuisUniversity-5706.image priorSource: 8808201!

----STARTUP---- (18 April 2023 20:31:41) as /home/rpetey317/Code/algoritmos3/Cuis/CuisUniversity-5706.image!


!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:47'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:51'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:31:52'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:32'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:33:36'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:30'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:34'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:36'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:34:38'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:35:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:35:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:35:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:35:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:35:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:35:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/18/2023 20:35:21'!
PASSED!

----STARTUP---- (19 April 2023 16:10:36) as /home/rpetey317/Code/algoritmos3/Cuis/CuisUniversity-5706.image!


!classRemoval: #OrquestadorDeCombatesTest stamp: 'rabg 4/19/2023 16:12:20'!
DenotativeObject subclass: #OrquestadorDeCombatesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #EstrategiasTest stamp: 'rabg 4/19/2023 16:12:21'!
DenotativeObject subclass: #EstrategiasTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatientesTest stamp: 'rabg 4/19/2023 16:12:22'!
DenotativeObject subclass: #CombatientesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatienteOrcoOlgra stamp: 'rabg 4/19/2023 16:12:23'!
DenotativeObject subclass: #CombatienteOrcoOlgra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatienteOrcoMankrik stamp: 'rabg 4/19/2023 16:12:23'!
DenotativeObject subclass: #CombatienteOrcoMankrik
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classRemoval: #CombatienteHumanoArthas stamp: 'rabg 4/19/2023 16:12:24'!
DenotativeObject subclass: #CombatienteHumanoArthas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

----End fileIn of /home/rpetey317/Code/algoritmos3/Cuis/Code/Ejercicios/Paso 2/Resolucion.st----!

OrquestadorDeCombatesTest
	collaboratorNames: 'bando1 bando2 resultadoDelCombate rondasDisputadas'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:18:05'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2 resultadoDelCombate rondasDisputadas'!

!classDefinition: #OrquestadorDeCombatesTest category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:18:05'!
DenotativeObject subclass: #OrquestadorDeCombatesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:18:05'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2 resultadoDelCombate rondasDisputadas'!
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:19:43' prior: 50611349!
desarrollarDuranteRondas: unasRondas
	
	| ganadorDelCombate 
	sobrevivientesBando1 sobrevivientesBando2
	rondasRealizadas quedanSobrevivientesDeAmbosBandos|
	
	rondasRealizadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasRealizadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasRealizadas := rondasRealizadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Indeterminado']
			ifFalse: [ganadorDelCombate := 'Ganó el bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Ganó el bando 1']
			ifFalse: [ganadorDelCombate := 'Indeterminado']	
	].

	rondasDisputadas := rondasRealizadas .
! !

OrquestadorDeCombatesTest
	collaboratorNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas'
	in: 'CombatientesFantasticosPaso2'!

OrquestadorDeCombatesTest
	collaboratorNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas'
	in: 'CombatientesFantasticosPaso2'!
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:21:30' prior: 50611936!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	rondasRealizadas quedanSobrevivientesDeAmbosBandos|
	
	rondasRealizadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasRealizadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasRealizadas := rondasRealizadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [resultadoDelCombate := 'Indeterminado']
			ifFalse: [resultadoDelCombate := 'Ganó el bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [resultadoDelCombate := 'Ganó el bando 1']
			ifFalse: [resultadoDelCombate := 'Indeterminado']	
	].

	rondasDisputadas := rondasRealizadas .
! !

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:21:56'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas'!
!OrquestadorDeCombatesTest class methodsFor: 'as yet unclassified' stamp: 'rabg 4/19/2023 16:21:56' prior: 50611991!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	rondasRealizadas quedanSobrevivientesDeAmbosBandos|
	
	rondasRealizadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasRealizadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasRealizadas := rondasRealizadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Indeterminado']
			ifFalse: [ganadorDelCombate := 'Ganó el bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Ganó el bando 1']
			ifFalse: [ganadorDelCombate := 'Indeterminado']	
	].

	rondasDisputadas := rondasRealizadas .
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:22:44' prior: 50612045!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Indeterminado']
			ifFalse: [ganadorDelCombate := 'Ganó el bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Ganó el bando 1']
			ifFalse: [ganadorDelCombate := 'Indeterminado']	
	].

	rondasDisputadas := rondasDisputadas .
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:23:13' prior: 50612091!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Indeterminado']
			ifFalse: [ganadorDelCombate := 'Ganó el bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Ganó el bando 1']
			ifFalse: [ganadorDelCombate := 'Indeterminado']	
	].
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:23:54' prior: 50611336!
assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((ganadorDelCombate = 'Indeterminado') & (rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:24:46' prior: 50611323!
assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((ganadorDelCombate = 'Ganó el bando 2') & (rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:24:57' prior: 50611310!
assertElResultadoIndicaQueGanoElBando1: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((ganadorDelCombate = 'Ganó el bando 1') & (rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:25:09' prior: 50612201!
assertElResultadoIndicaQueGanoElBando1: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((ganadorDelCombate = 'Bando 1') & (rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:25:13' prior: 50612191!
assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((ganadorDelCombate = 'Bando 2') & (rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:25:45' prior: 50612137!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Indeterminado']
			ifFalse: [ganadorDelCombate := 'Bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Bando 1']
			ifFalse: [ganadorDelCombate := 'Indeterminado']	
	].
! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:53'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:53'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:25:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:11'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:26:15'!
PASSED!
!CombatienteHumanoArthas class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 16:27:49' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 6; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm0_1 | | temp0_2 |
	temp0_2 _ argm0_1 select: [ :argm0_3 |
		argm0_3 estaFueraDeCombate not ].
	temp0_2 detectMin: [ :argm1_3 |
		argm1_3 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := True.! !
!CombatienteOrcoMankrik class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 16:27:50' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 18; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!CombatienteOrcoOlgra class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 16:27:50' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!OrquestadorDeCombatesTest class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 16:27:50' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	bando2 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	ganadorDelCombate := 'Indeterminado'.
	rondasDisputadas := 10.! !

!methodRemoval: CombatienteHumanoArthas class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 16:27:50'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 6; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm0_1 | | temp0_2 |
	temp0_2 _ argm0_1 select: [ :argm0_3 |
		argm0_3 estaFueraDeCombate not ].
	temp0_2 detectMin: [ :argm1_3 |
		argm1_3 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := True.!

!methodRemoval: CombatienteOrcoMankrik class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 16:27:50'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 18; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: CombatienteOrcoOlgra class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 16:27:50'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: OrquestadorDeCombatesTest class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 16:27:50'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	bando2 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	ganadorDelCombate := 'Indeterminado'.
	rondasDisputadas := 10.!

ObjectBuilder create: #ResultadoDeUnCombate asChildOf: DenotativeObject collaboratorNames: '' in: 'CombatientesFantasticosPaso2'!

!classDefinition: #ResultadoDeUnCombate category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:34:44'!
DenotativeObject subclass: #ResultadoDeUnCombate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'ResultadoDeUnCombate class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:34:44'!
ResultadoDeUnCombate class
	instanceVariableNames: ''!

ResultadoDeUnCombate
	collaboratorNames: 'ganador rondas'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'ResultadoDeUnCombate class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:34:58'!
ResultadoDeUnCombate class
	instanceVariableNames: 'ganador rondas'!

!classDefinition: #ResultadoDeUnCombate category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:34:58'!
DenotativeObject subclass: #ResultadoDeUnCombate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'ResultadoDeUnCombate class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:34:58'!
ResultadoDeUnCombate class
	instanceVariableNames: 'ganador rondas'!
!ResultadoDeUnCombate class methodsFor: 'nil' stamp: 'rabg 4/19/2023 16:36:38'!
ganadorDelCombate
	^ganador .! !
!ResultadoDeUnCombate class methodsFor: 'as yet unclassified' stamp: 'rabg 4/19/2023 16:36:50'!
rondasDisputadas
	^rondas.! !
!ResultadoDeUnCombate class methodsFor: 'guardar resultados' stamp: 'rabg 4/19/2023 16:38:51'!
declararGanador: unBando
	ganador := unBando ! !
!ResultadoDeUnCombate class methodsFor: 'guardar resultados' stamp: 'rabg 4/19/2023 16:39:16'!
declararRondasPeleadas: unasRondas
	rondas := unasRondas ! !

OrquestadorDeCombatesTest
	collaboratorNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas resultado'
	in: 'CombatientesFantasticosPaso2'!

OrquestadorDeCombatesTest
	collaboratorNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas resultadoDelCombate'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:39:43'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas resultadoDelCombate'!

!classDefinition: #OrquestadorDeCombatesTest category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:39:43'!
DenotativeObject subclass: #OrquestadorDeCombatesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:39:43'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas resultadoDelCombate'!

OrquestadorDeCombatesTest
	collaboratorNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:41:49'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas'!

!classDefinition: #OrquestadorDeCombatesTest category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:41:49'!
DenotativeObject subclass: #OrquestadorDeCombatesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:41:49'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2 ganadorDelCombate rondasDisputadas'!
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:42:17' prior: 50612231!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Indeterminado']
			ifFalse: [ganadorDelCombate := 'Bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Bando 1']
			ifFalse: [ganadorDelCombate := 'Indeterminado']	
	].

	^ResultadoDeUnCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:42:57'!
resultadoDelCombate
	^ResultadoDeUnCombate ! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:43:19' prior: 50612859!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Indeterminado']
			ifFalse: [ganadorDelCombate := 'Bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [ganadorDelCombate := 'Bando 1']
			ifFalse: [ganadorDelCombate := 'Indeterminado']	
	].
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:45:15' prior: 50612908!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos rondasPeleadas|
	
	rondasPeleadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasPeleadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasPeleadas := rondasPeleadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasPeleadas: rondasPeleadas.
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:45:59' prior: 50612181!
assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((resultadoDeUnCombate ganadorDelCombate = 'Indeterminado') & (resultadoDeUnCombate rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:46:32' prior: 50612221!
assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((resultadoDeUnCombate ganadorDelCombate = 'Bando 2') & (resultadoDeUnCombate rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:46:36' prior: 50612211!
assertElResultadoIndicaQueGanoElBando1: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((resultadoDeUnCombate ganadorDelCombate = 'Bando 1') & (resultadoDeUnCombate rondasDisputadas = unNumeroDeRondaEsperado)).! !

OrquestadorDeCombatesTest
	collaboratorNames: 'bando1 bando2'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:47:29'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2'!

!classDefinition: #OrquestadorDeCombatesTest category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:47:30'!
DenotativeObject subclass: #OrquestadorDeCombatesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/19/2023 16:47:30'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2'!
!ResultadoDeUnCombate class methodsFor: 'guardar resultados' stamp: 'rabg 4/19/2023 16:48:01'!
declararRondasDisputadas: unasRondas
	rondas := unasRondas ! !
!OrquestadorDeCombatesTest class methodsFor: 'as yet unclassified' stamp: 'rabg 4/19/2023 16:48:01' prior: 50612953!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos rondasPeleadas|
	
	rondasPeleadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasPeleadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasPeleadas := rondasPeleadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasPeleadas.
	
	^self resultadoDelCombate.
! !

!methodRemoval: ResultadoDeUnCombate class #declararRondasPeleadas: stamp: 'rabg 4/19/2023 16:48:01'!
declararRondasPeleadas: unasRondas
	rondas := unasRondas !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:48:37' prior: 50613067!
desarrollarDuranteRondas: unasRondas
	
	| sobrevivientesBando1 sobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((sobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	sobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(sobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:20'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:22'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:49:25'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:54'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:54'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:51:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:52:02'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:52:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 16:52:03'!
PASSED!
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:52:51' prior: 50613122!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 sobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((quedanSobrevivientesBando1 isEmpty) | (sobrevivientesBando2 isEmpty)) not.
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	quedanSobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	sobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(quedanSobrevivientesBando1 isEmpty) ifTrue: [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		(sobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:53:08' prior: 50613376!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
		quedanSobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
		quedanSobrevivientesDeAmbosBandos := ((quedanSobrevivientesBando1 isEmpty) | (quedanSobrevivientesBando2 isEmpty)) not.
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	quedanSobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	quedanSobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(quedanSobrevivientesBando1 isEmpty) ifTrue: [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:55:06' prior: 50613427!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesBando1 & quedanSobrevivientesBando2)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.
		quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.	
		
		rondasDisputadas := rondasDisputadas + 1.
		].
	
	quedanSobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	quedanSobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(quedanSobrevivientesBando1 isEmpty) ifTrue: [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:56:45' prior: 50613479!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.
		quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.	
		quedanSobrevivientesDeAmbosBandos := (quedanSobrevivientesBando1 & quedanSobrevivientesBando2). 
		
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	quedanSobrevivientesBando1 := bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].
	quedanSobrevivientesBando2 := bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not].	
	
	(quedanSobrevivientesBando1 isEmpty) ifTrue: [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:57:31' prior: 50613529!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  quedanSobrevivientesDeAmbosBandos rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesDeAmbosBandos  := true.
	quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.
	quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.	
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesDeAmbosBandos)] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.
		quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.	
		quedanSobrevivientesDeAmbosBandos := (quedanSobrevivientesBando1 & quedanSobrevivientesBando2). 
		
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	(quedanSobrevivientesBando1 isEmpty) ifTrue: [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:58:01' prior: 50613581!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.
	quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.	
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesBando1 & quedanSobrevivientesBando2 )] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.
		quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.	
		
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	(quedanSobrevivientesBando1 isEmpty) ifTrue: [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		(quedanSobrevivientesBando2 isEmpty) 
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 16:59:29' prior: 50613634!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.
	quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.	
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesBando1 & quedanSobrevivientesBando2 )] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isNotEmpty: 1.
		quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.	
		
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	quedanSobrevivientesBando1 ifTrue: [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 17:00:32' prior: 50613682!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.
	quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty.	
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesBando1 & quedanSobrevivientesBando2 )] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := 
			(bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty not.
		quedanSobrevivientesBando2 :=
			(bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty not.	
		
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	quedanSobrevivientesBando1 ifTrue: [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !

{} isEmpty !

{} isEmpty not!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:26'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:26'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:30'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:34'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:49'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:49'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:49'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:49'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:49'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:49'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:49'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:01:52'!
ERROR!
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 17:02:47' prior: 50613729!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesBando1 := (bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty not.
	quedanSobrevivientesBando2 := (bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty not.	
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesBando1 & quedanSobrevivientesBando2 )] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := 
			(bando1 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty not.
		quedanSobrevivientesBando2 :=
			(bando2 select: [:unCombatiente | unCombatiente estaFueraDeCombate not]) isEmpty not.	
		
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	quedanSobrevivientesBando1 ifTrue: [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:58'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:02:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:28'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:32'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:42'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:03:43'!
PASSED!
!CombatienteHumanoArthas class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:03:47' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 6; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm0_1 | | temp0_2 |
	temp0_2 _ argm0_1 select: [ :argm0_3 |
		argm0_3 estaFueraDeCombate not ].
	temp0_2 detectMin: [ :argm1_3 |
		argm1_3 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := True.! !
!CombatienteOrcoMankrik class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:03:48' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 18; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!CombatienteOrcoOlgra class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:03:48' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!OrquestadorDeCombatesTest class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:03:48' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	bando2 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).! !
!ResultadoDeUnCombate class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:03:48' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	ganador := 'Indeterminado'.
	rondas := 10.! !

!methodRemoval: CombatienteHumanoArthas class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:03:48'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 20; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 6; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm0_1 | | temp0_2 |
	temp0_2 _ argm0_1 select: [ :argm0_3 |
		argm0_3 estaFueraDeCombate not ].
	temp0_2 detectMin: [ :argm1_3 |
		argm1_3 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := True.!

!methodRemoval: CombatienteOrcoMankrik class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:03:48'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 18; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: CombatienteOrcoOlgra class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:03:48'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: OrquestadorDeCombatesTest class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:03:48'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	bando2 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).!

!methodRemoval: ResultadoDeUnCombate class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:03:48'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	ganador := 'Indeterminado'.
	rondas := 10.!
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/19/2023 17:44:10' prior: 50613828!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesBando1 := (bando1 reject: [:unCombatiente | unCombatiente estaFueraDeCombate]) isEmpty not.
	quedanSobrevivientesBando2 := (bando2 reject: [:unCombatiente | unCombatiente estaFueraDeCombate]) isEmpty not.	
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesBando1 & quedanSobrevivientesBando2 )] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := 
			(bando1 reject: [:unCombatiente | unCombatiente estaFueraDeCombate]) isEmpty not.
		quedanSobrevivientesBando2 :=
			(bando2 reject: [:unCombatiente | unCombatiente estaFueraDeCombate]) isEmpty not.	
		
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	quedanSobrevivientesBando1 ifTrue: [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:18'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:18'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:19'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/19/2023 17:44:29'!
PASSED!
!CombatienteHumanoArthas class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:46:01' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 7; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 10; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm0_1 | | temp0_2 |
	temp0_2 _ argm0_1 select: [ :argm0_3 |
		argm0_3 estaFueraDeCombate not ].
	temp0_2 detectMax: [ :argm1_3 |
		argm1_3 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!CombatienteOrcoMankrik class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:46:01' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!CombatienteOrcoOlgra class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:46:02' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!OrquestadorDeCombatesTest class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:46:02' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	bando2 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).! !
!ResultadoDeUnCombate class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/19/2023 17:46:02' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	ganador := 'Bando 2'.
	rondas := 4.! !

!methodRemoval: CombatienteHumanoArthas class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:46:02'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 7; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 10; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm0_1 | | temp0_2 |
	temp0_2 _ argm0_1 select: [ :argm0_3 |
		argm0_3 estaFueraDeCombate not ].
	temp0_2 detectMax: [ :argm1_3 |
		argm1_3 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: CombatienteOrcoMankrik class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:46:02'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: CombatienteOrcoOlgra class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:46:02'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: OrquestadorDeCombatesTest class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:46:02'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	bando2 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).!

!methodRemoval: ResultadoDeUnCombate class #initializeCollaboratorsFromFile stamp: 'rabg 4/19/2023 17:46:02'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	ganador := 'Bando 2'.
	rondas := 4.!

----QUIT----(19 April 2023 18:54:31) CuisUniversity-5706.image priorSource: 8891586!

----STARTUP---- (21 April 2023 17:51:09) as /home/rpetey317/Code/algoritmos3/Cuis/CuisUniversity-5706.image!


DenotativeObject subclass: #OrquestadorDeCombates
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: #OrquestadorDeCombates category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/21/2023 17:51:30'!
DenotativeObject subclass: #OrquestadorDeCombates
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

OrquestadorDeCombates class
	instanceVariableNames: 'bando1 bando2'!

!classDefinition: 'OrquestadorDeCombates class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/21/2023 17:51:30'!
OrquestadorDeCombates class
	instanceVariableNames: 'bando1 bando2'!
!OrquestadorDeCombates class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:51:30'!
assertElResultadoIndicaQueGanoElBando1: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((resultadoDeUnCombate ganadorDelCombate = 'Bando 1') & (resultadoDeUnCombate rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombates class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:51:30'!
assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((resultadoDeUnCombate ganadorDelCombate = 'Bando 2') & (resultadoDeUnCombate rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombates class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:51:30'!
assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((resultadoDeUnCombate ganadorDelCombate = 'Indeterminado') & (resultadoDeUnCombate rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombates class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:51:30'!
desarrollarDuranteRondas: unasRondas
	
	| quedanSobrevivientesBando1 quedanSobrevivientesBando2
	  rondasDisputadas|
	
	rondasDisputadas := 0.
	quedanSobrevivientesBando1 := (bando1 reject: [:unCombatiente | unCombatiente estaFueraDeCombate]) isEmpty not.
	quedanSobrevivientesBando2 := (bando2 reject: [:unCombatiente | unCombatiente estaFueraDeCombate]) isEmpty not.	
	
	[(rondasDisputadas < unasRondas) & (quedanSobrevivientesBando1 & quedanSobrevivientesBando2 )] whileTrue: [	
		bando1 do: [:unCombatiente | unCombatiente atacar].
		bando2 do: [:unCombatiente | unCombatiente atacar].
		
		quedanSobrevivientesBando1 := 
			(bando1 reject: [:unCombatiente | unCombatiente estaFueraDeCombate]) isEmpty not.
		quedanSobrevivientesBando2 :=
			(bando2 reject: [:unCombatiente | unCombatiente estaFueraDeCombate]) isEmpty not.	
		
		rondasDisputadas := rondasDisputadas + 1.
		
		].
	
	quedanSobrevivientesBando1 ifTrue: [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Indeterminado']
			ifFalse: [self resultadoDelCombate declararGanador: 'Bando 2']
	] ifFalse:  [
		quedanSobrevivientesBando2
			ifTrue: [self resultadoDelCombate declararGanador: 'Bando 1']
			ifFalse: [self resultadoDelCombate declararGanador: 'Indeterminado']	
	].

	self resultadoDelCombate declararRondasDisputadas: rondasDisputadas.
	
	^self resultadoDelCombate.
! !
!OrquestadorDeCombates class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:51:30'!
establecerCombateEntreBando1: unBando1 contraBando2: unBando2
	bando1 := unBando1.
	bando1 do: [:unCombatiente | unCombatiente enemigos: unBando2].
	bando2 := unBando2.
	bando2 do: [:unCombatiente | unCombatiente enemigos: unBando1].! !
!OrquestadorDeCombates class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:51:30'!
orquestadorDeCombates
	
	^self.! !
!OrquestadorDeCombates class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:51:30'!
resultadoDelCombate
	^ResultadoDeUnCombate ! !
!OrquestadorDeCombates class methodsFor: 'combates' stamp: 'rabg 4/21/2023 17:51:30'!
orquestadorParaCombateArthasConFocoEnElMasSanoVsOrcos	
	
	self prepararCombatientes.
	self combatienteHumanoArthas focalizarEnElMasSano. 
	self establecerCombateEntreBando1: {self combatienteHumanoArthas } contraBando2: { self combatienteOrcoOlgra. self combatienteOrcoMankrik }.
	^ self orquestadorDeCombates! !
!OrquestadorDeCombates class methodsFor: 'combates' stamp: 'rabg 4/21/2023 17:51:30'!
orquestadorParaCombateArthasInmuneYFocoEnElMasHeridoVsOrcos	
	
	self prepararCombatientes.
	self combatienteHumanoArthas atacarA: self combatienteOrcoOlgra.
	self combatienteHumanoArthas equiparConArmaduraDeMetal. 
	self combatienteHumanoArthas focalizarEnElMasHerido. 
	self establecerCombateEntreBando1:  {self combatienteHumanoArthas } contraBando2: { self combatienteOrcoOlgra. self combatienteOrcoMankrik }.
	^ self orquestadorDeCombates! !
!OrquestadorDeCombates class methodsFor: 'combates' stamp: 'rabg 4/21/2023 17:51:30'!
orquestadorParaCombateArthasVsOlgra	
	
	self prepararCombatientes. 
	self establecerCombateEntreBando1: {self combatienteHumanoArthas } contraBando2: { self combatienteOrcoOlgra }.
	^ self orquestadorDeCombates! !
!OrquestadorDeCombates class methodsFor: 'combates' stamp: 'rabg 4/21/2023 17:51:30'!
orquestadorParaCombateArthasVsOrcos
	self prepararCombatientes.
	self establecerCombateEntreBando1: { self combatienteHumanoArthas } contraBando2: {self combatienteOrcoOlgra. self combatienteOrcoMankrik }.
	^ self orquestadorDeCombates! !
!OrquestadorDeCombates class methodsFor: 'combates' stamp: 'rabg 4/21/2023 17:51:30'!
orquestadorParaCombateManoAManoConBando2Inmune	
	
	self prepararCombatientes.
	self combatienteOrcoOlgra equiparEspada.
	self establecerCombateEntreBando1: {self combatienteHumanoArthas } contraBando2: { self combatienteOrcoOlgra }.
	^ self orquestadorDeCombates! !
!OrquestadorDeCombates class methodsFor: 'combates' stamp: 'rabg 4/21/2023 17:51:30'!
orquestadorParaCombateOrcosVsArthas
	self prepararCombatientes.
	self establecerCombateEntreBando1: {self combatienteOrcoOlgra. self combatienteOrcoMankrik } contraBando2: { self combatienteHumanoArthas }.
	^ self orquestadorDeCombates! !
!OrquestadorDeCombates class methodsFor: 'combates' stamp: 'rabg 4/21/2023 17:51:30'!
orquestadorParaCombateOrcosVsArthasConFocoEnElMasSano	
	
	self prepararCombatientes.
	self combatienteHumanoArthas focalizarEnElMasSano. 
	self establecerCombateEntreBando1: { self combatienteOrcoOlgra. self combatienteOrcoMankrik } contraBando2: {self combatienteHumanoArthas }. 
	^ self orquestadorDeCombates! !
!OrquestadorDeCombates class methodsFor: 'combates' stamp: 'rabg 4/21/2023 17:51:30'!
orquestadorParaCombateOrcosVsArthasInmuneYFocoEnElMasHerido	
	
	self prepararCombatientes.
	self combatienteHumanoArthas atacarA: self combatienteOrcoOlgra.
	self combatienteHumanoArthas equiparConArmaduraDeMetal. 
	self combatienteHumanoArthas focalizarEnElMasHerido. 
	self establecerCombateEntreBando1: { self combatienteOrcoOlgra. self combatienteOrcoMankrik } contraBando2: {self combatienteHumanoArthas }.
	^ self orquestadorDeCombates! !
!OrquestadorDeCombates class methodsFor: 'combates' stamp: 'rabg 4/21/2023 17:51:30'!
prepararCombatientes

	self combatienteHumanoArthas prepararseParaElCombate. 
	self combatienteOrcoOlgra prepararseParaElCombate.
	self combatienteOrcoMankrik prepararseParaElCombate. ! !
!OrquestadorDeCombates class methodsFor: 'combatientes' stamp: 'rabg 4/21/2023 17:51:30'!
combatienteHumanoArthas

	^ CombatienteHumanoArthas! !
!OrquestadorDeCombates class methodsFor: 'combatientes' stamp: 'rabg 4/21/2023 17:51:30'!
combatienteOrcoMankrik

	^ CombatienteOrcoMankrik! !
!OrquestadorDeCombates class methodsFor: 'combatientes' stamp: 'rabg 4/21/2023 17:51:30'!
combatienteOrcoOlgra

	^ CombatienteOrcoOlgra! !
!OrquestadorDeCombates class methodsFor: 'tests - mano a mano' stamp: 'rabg 4/21/2023 17:51:30'!
test01AlDesarrollarUnCombateSinRondasLosCombatientesNoSeAtacan
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	orquestadorDeCombates desarrollarDuranteRondas: 0.
	
	Assert isTrue: self combatienteHumanoArthas noEstaHerido.
	Assert isTrue: self combatienteOrcoOlgra noEstaHerido.! !
!OrquestadorDeCombates class methodsFor: 'tests - mano a mano' stamp: 'rabg 4/21/2023 17:51:30'!
test02AlDesarrollarUnCombateManoAManoDeUnaRondaLosBandosSeAtacanUnaVez
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	orquestadorDeCombates desarrollarDuranteRondas: 1.
	
	Assert isTrue: (self combatienteHumanoArthas tienePuntosDeVida: 18*pv) description: 'Arthas debe recibir un puñetazo (2 de daño)'.
	Assert isTrue: (self combatienteOrcoOlgra tienePuntosDeVida: 18*pv) description: 'Olgra debe recibir un puñetazo (2 de daño)'.! !
!OrquestadorDeCombates class methodsFor: 'tests - mano a mano' stamp: 'rabg 4/21/2023 17:51:30'!
test03AlDesarrollarUnCombateManoAManoConMasDeUnaRondaLosBandosSeAtacanCadaVez
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	orquestadorDeCombates desarrollarDuranteRondas: 2.
	
	Assert isTrue: (self combatienteHumanoArthas tienePuntosDeVida: 16*pv) description: 'Arthas debe recibir dos puñetazos (4 de daño)'.
	Assert isTrue: (self combatienteOrcoOlgra tienePuntosDeVida: 16*pv) description: 'Olgra debe recibir dos puñetazos (4 de daño)'.! !
!OrquestadorDeCombates class methodsFor: 'tests - mano a mano' stamp: 'rabg 4/21/2023 17:51:30'!
test04AlDesarrollarUnCombateManoAManoSinGanadoresElResultadoEsIndeterminado
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 0.
	
	self assertElResultadoIndicaQueNoHayGanador: resultado alcanzadaLaRonda: 0.! !
!OrquestadorDeCombates class methodsFor: 'tests - mano a mano' stamp: 'rabg 4/21/2023 17:51:30'!
test05AlDesarrollarUnCombateManoAManoGanaElBando1CuandoDejaFueraDeCombateASuRival
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 10.
	
	self assertElResultadoIndicaQueGanoElBando1: resultado alcanzadaLaRonda: 10.! !
!OrquestadorDeCombates class methodsFor: 'tests - mano a mano' stamp: 'rabg 4/21/2023 17:51:30'!
test06AlDesarrollarUnCombateCuandoHayUnGanadorFinalizaEnLaRondaQueElPerdedorQuedoFueraDeCombate
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 11.
	
	self assertElResultadoIndicaQueGanoElBando1: resultado alcanzadaLaRonda: 10.! !
!OrquestadorDeCombates class methodsFor: 'tests - mano a mano' stamp: 'rabg 4/21/2023 17:51:30'!
test07AlDesarrollarUnCombateManoAManoGanaElBando2CuandoDejaFueraDeCombateASuRival
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateManoAManoConBando2Inmune.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 100.
	
	self assertElResultadoIndicaQueGanoElBando2: resultado alcanzadaLaRonda: 3.! !
!OrquestadorDeCombates class methodsFor: 'tests - muches vs muches' stamp: 'rabg 4/21/2023 17:51:30'!
test08AlDesarrollarUnCombateLosDelBando1PuedenAtacarACualquieraDelBando2
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateArthasConFocoEnElMasSanoVsOrcos.
	
	orquestadorDeCombates desarrollarDuranteRondas: 2.
	
	Assert isTrue: self combatienteOrcoOlgra estaHerido. 
	Assert isTrue: self combatienteOrcoMankrik estaHerido. ! !
!OrquestadorDeCombates class methodsFor: 'tests - muches vs muches' stamp: 'rabg 4/21/2023 17:51:30'!
test09AlDesarrollarUnCombateAtacanTodesLosDelBando1EnCadaRonda
	"
		En cada ronda Olgra daña a Arthas en 2  (2 puños + 1 por fuerza - 1 por agilidad de Arthas) y  Mankrik 3 (2 puños + 2 por fuerza - 1 por agilidad de Arthas) 
	"
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateOrcosVsArthas.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 4.
	
	self assertElResultadoIndicaQueGanoElBando1: resultado alcanzadaLaRonda: 4.! !
!OrquestadorDeCombates class methodsFor: 'tests - muches vs muches' stamp: 'rabg 4/21/2023 17:51:30'!
test10AlDesarrollarUnCombateLosDelBando2PuedenAtacarACualquieraDelBando1
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateOrcosVsArthasConFocoEnElMasSano.
	
	orquestadorDeCombates desarrollarDuranteRondas: 2.
	
	Assert isTrue: self combatienteOrcoOlgra estaHerido. 
	Assert isTrue: self combatienteOrcoMankrik estaHerido. ! !
!OrquestadorDeCombates class methodsFor: 'tests - muches vs muches' stamp: 'rabg 4/21/2023 17:51:30'!
test11AlDesarrollarUnCombateAtacanTodesLosDelBando2EnCadaRonda
	"
		En cada ronda Olgra daña a Arthas en 2  (2 puños + 1 por fuerza - 1 por agilidad de Arthas) y  Mankrik 3 (2 puños + 2 por fuerza - 1 por agilidad de Arthas) 
	"
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOrcos.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 4.
	
	self assertElResultadoIndicaQueGanoElBando2: resultado alcanzadaLaRonda: 4.! !
!OrquestadorDeCombates class methodsFor: 'tests - muches vs muches' stamp: 'rabg 4/21/2023 17:51:30'!
test12AlDesarrollarUnCombateLosDelBando1NoGananSiTodosLosDelBando2NoEstanFueraDeCombate
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasInmuneYFocoEnElMasHeridoVsOrcos.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 10.
	
	self assertElResultadoIndicaQueNoHayGanador: resultado alcanzadaLaRonda: 10.! !
!OrquestadorDeCombates class methodsFor: 'tests - muches vs muches' stamp: 'rabg 4/21/2023 17:51:30'!
test13AlDesarrollarUnCombateLosDelBando2NoGananSiTodosLosDelBando1NoEstanFueraDeCombate
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateOrcosVsArthasInmuneYFocoEnElMasHerido.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 10.
	
	self assertElResultadoIndicaQueNoHayGanador: resultado alcanzadaLaRonda: 10.! !

!methodRemoval: OrquestadorDeCombates class #test01AlDesarrollarUnCombateSinRondasLosCombatientesNoSeAtacan stamp: 'rabg 4/21/2023 17:51:40'!
test01AlDesarrollarUnCombateSinRondasLosCombatientesNoSeAtacan
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	orquestadorDeCombates desarrollarDuranteRondas: 0.
	
	Assert isTrue: self combatienteHumanoArthas noEstaHerido.
	Assert isTrue: self combatienteOrcoOlgra noEstaHerido.!

!methodRemoval: OrquestadorDeCombates class #test02AlDesarrollarUnCombateManoAManoDeUnaRondaLosBandosSeAtacanUnaVez stamp: 'rabg 4/21/2023 17:51:40'!
test02AlDesarrollarUnCombateManoAManoDeUnaRondaLosBandosSeAtacanUnaVez
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	orquestadorDeCombates desarrollarDuranteRondas: 1.
	
	Assert isTrue: (self combatienteHumanoArthas tienePuntosDeVida: 18*pv) description: 'Arthas debe recibir un puñetazo (2 de daño)'.
	Assert isTrue: (self combatienteOrcoOlgra tienePuntosDeVida: 18*pv) description: 'Olgra debe recibir un puñetazo (2 de daño)'.!

!methodRemoval: OrquestadorDeCombates class #test03AlDesarrollarUnCombateManoAManoConMasDeUnaRondaLosBandosSeAtacanCadaVez stamp: 'rabg 4/21/2023 17:51:40'!
test03AlDesarrollarUnCombateManoAManoConMasDeUnaRondaLosBandosSeAtacanCadaVez
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	orquestadorDeCombates desarrollarDuranteRondas: 2.
	
	Assert isTrue: (self combatienteHumanoArthas tienePuntosDeVida: 16*pv) description: 'Arthas debe recibir dos puñetazos (4 de daño)'.
	Assert isTrue: (self combatienteOrcoOlgra tienePuntosDeVida: 16*pv) description: 'Olgra debe recibir dos puñetazos (4 de daño)'.!

!methodRemoval: OrquestadorDeCombates class #test04AlDesarrollarUnCombateManoAManoSinGanadoresElResultadoEsIndeterminado stamp: 'rabg 4/21/2023 17:51:40'!
test04AlDesarrollarUnCombateManoAManoSinGanadoresElResultadoEsIndeterminado
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 0.
	
	self assertElResultadoIndicaQueNoHayGanador: resultado alcanzadaLaRonda: 0.!

!methodRemoval: OrquestadorDeCombates class #test05AlDesarrollarUnCombateManoAManoGanaElBando1CuandoDejaFueraDeCombateASuRival stamp: 'rabg 4/21/2023 17:51:40'!
test05AlDesarrollarUnCombateManoAManoGanaElBando1CuandoDejaFueraDeCombateASuRival
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 10.
	
	self assertElResultadoIndicaQueGanoElBando1: resultado alcanzadaLaRonda: 10.!

!methodRemoval: OrquestadorDeCombates class #test06AlDesarrollarUnCombateCuandoHayUnGanadorFinalizaEnLaRondaQueElPerdedorQuedoFueraDeCombate stamp: 'rabg 4/21/2023 17:51:40'!
test06AlDesarrollarUnCombateCuandoHayUnGanadorFinalizaEnLaRondaQueElPerdedorQuedoFueraDeCombate
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOlgra.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 11.
	
	self assertElResultadoIndicaQueGanoElBando1: resultado alcanzadaLaRonda: 10.!

!methodRemoval: OrquestadorDeCombates class #test07AlDesarrollarUnCombateManoAManoGanaElBando2CuandoDejaFueraDeCombateASuRival stamp: 'rabg 4/21/2023 17:51:40'!
test07AlDesarrollarUnCombateManoAManoGanaElBando2CuandoDejaFueraDeCombateASuRival
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateManoAManoConBando2Inmune.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 100.
	
	self assertElResultadoIndicaQueGanoElBando2: resultado alcanzadaLaRonda: 3.!

!methodRemoval: OrquestadorDeCombates class #test08AlDesarrollarUnCombateLosDelBando1PuedenAtacarACualquieraDelBando2 stamp: 'rabg 4/21/2023 17:51:45'!
test08AlDesarrollarUnCombateLosDelBando1PuedenAtacarACualquieraDelBando2
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateArthasConFocoEnElMasSanoVsOrcos.
	
	orquestadorDeCombates desarrollarDuranteRondas: 2.
	
	Assert isTrue: self combatienteOrcoOlgra estaHerido. 
	Assert isTrue: self combatienteOrcoMankrik estaHerido. !

!methodRemoval: OrquestadorDeCombates class #test09AlDesarrollarUnCombateAtacanTodesLosDelBando1EnCadaRonda stamp: 'rabg 4/21/2023 17:51:45'!
test09AlDesarrollarUnCombateAtacanTodesLosDelBando1EnCadaRonda
	"
		En cada ronda Olgra daña a Arthas en 2  (2 puños + 1 por fuerza - 1 por agilidad de Arthas) y  Mankrik 3 (2 puños + 2 por fuerza - 1 por agilidad de Arthas) 
	"
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateOrcosVsArthas.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 4.
	
	self assertElResultadoIndicaQueGanoElBando1: resultado alcanzadaLaRonda: 4.!

!methodRemoval: OrquestadorDeCombates class #test10AlDesarrollarUnCombateLosDelBando2PuedenAtacarACualquieraDelBando1 stamp: 'rabg 4/21/2023 17:51:45'!
test10AlDesarrollarUnCombateLosDelBando2PuedenAtacarACualquieraDelBando1
	
	| orquestadorDeCombates |
	orquestadorDeCombates := self orquestadorParaCombateOrcosVsArthasConFocoEnElMasSano.
	
	orquestadorDeCombates desarrollarDuranteRondas: 2.
	
	Assert isTrue: self combatienteOrcoOlgra estaHerido. 
	Assert isTrue: self combatienteOrcoMankrik estaHerido. !

!methodRemoval: OrquestadorDeCombates class #test11AlDesarrollarUnCombateAtacanTodesLosDelBando2EnCadaRonda stamp: 'rabg 4/21/2023 17:51:45'!
test11AlDesarrollarUnCombateAtacanTodesLosDelBando2EnCadaRonda
	"
		En cada ronda Olgra daña a Arthas en 2  (2 puños + 1 por fuerza - 1 por agilidad de Arthas) y  Mankrik 3 (2 puños + 2 por fuerza - 1 por agilidad de Arthas) 
	"
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasVsOrcos.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 4.
	
	self assertElResultadoIndicaQueGanoElBando2: resultado alcanzadaLaRonda: 4.!

!methodRemoval: OrquestadorDeCombates class #test12AlDesarrollarUnCombateLosDelBando1NoGananSiTodosLosDelBando2NoEstanFueraDeCombate stamp: 'rabg 4/21/2023 17:51:45'!
test12AlDesarrollarUnCombateLosDelBando1NoGananSiTodosLosDelBando2NoEstanFueraDeCombate
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateArthasInmuneYFocoEnElMasHeridoVsOrcos.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 10.
	
	self assertElResultadoIndicaQueNoHayGanador: resultado alcanzadaLaRonda: 10.!

!methodRemoval: OrquestadorDeCombates class #test13AlDesarrollarUnCombateLosDelBando2NoGananSiTodosLosDelBando1NoEstanFueraDeCombate stamp: 'rabg 4/21/2023 17:51:45'!
test13AlDesarrollarUnCombateLosDelBando2NoGananSiTodosLosDelBando1NoEstanFueraDeCombate
	
	| orquestadorDeCombates resultado |
	orquestadorDeCombates := self orquestadorParaCombateOrcosVsArthasInmuneYFocoEnElMasHerido.
	
	resultado := orquestadorDeCombates desarrollarDuranteRondas: 10.
	
	self assertElResultadoIndicaQueNoHayGanador: resultado alcanzadaLaRonda: 10.!

!methodRemoval: OrquestadorDeCombates class #combatienteHumanoArthas stamp: 'rabg 4/21/2023 17:51:51'!
combatienteHumanoArthas

	^ CombatienteHumanoArthas!

!methodRemoval: OrquestadorDeCombates class #combatienteOrcoMankrik stamp: 'rabg 4/21/2023 17:51:51'!
combatienteOrcoMankrik

	^ CombatienteOrcoMankrik!

!methodRemoval: OrquestadorDeCombates class #combatienteOrcoOlgra stamp: 'rabg 4/21/2023 17:51:51'!
combatienteOrcoOlgra

	^ CombatienteOrcoOlgra!

!methodRemoval: OrquestadorDeCombates class #orquestadorParaCombateArthasConFocoEnElMasSanoVsOrcos stamp: 'rabg 4/21/2023 17:51:57'!
orquestadorParaCombateArthasConFocoEnElMasSanoVsOrcos	
	
	self prepararCombatientes.
	self combatienteHumanoArthas focalizarEnElMasSano. 
	self establecerCombateEntreBando1: {self combatienteHumanoArthas } contraBando2: { self combatienteOrcoOlgra. self combatienteOrcoMankrik }.
	^ self orquestadorDeCombates!

!methodRemoval: OrquestadorDeCombates class #orquestadorParaCombateArthasInmuneYFocoEnElMasHeridoVsOrcos stamp: 'rabg 4/21/2023 17:51:57'!
orquestadorParaCombateArthasInmuneYFocoEnElMasHeridoVsOrcos	
	
	self prepararCombatientes.
	self combatienteHumanoArthas atacarA: self combatienteOrcoOlgra.
	self combatienteHumanoArthas equiparConArmaduraDeMetal. 
	self combatienteHumanoArthas focalizarEnElMasHerido. 
	self establecerCombateEntreBando1:  {self combatienteHumanoArthas } contraBando2: { self combatienteOrcoOlgra. self combatienteOrcoMankrik }.
	^ self orquestadorDeCombates!

!methodRemoval: OrquestadorDeCombates class #orquestadorParaCombateArthasVsOlgra stamp: 'rabg 4/21/2023 17:51:57'!
orquestadorParaCombateArthasVsOlgra	
	
	self prepararCombatientes. 
	self establecerCombateEntreBando1: {self combatienteHumanoArthas } contraBando2: { self combatienteOrcoOlgra }.
	^ self orquestadorDeCombates!

!methodRemoval: OrquestadorDeCombates class #orquestadorParaCombateArthasVsOrcos stamp: 'rabg 4/21/2023 17:51:57'!
orquestadorParaCombateArthasVsOrcos
	self prepararCombatientes.
	self establecerCombateEntreBando1: { self combatienteHumanoArthas } contraBando2: {self combatienteOrcoOlgra. self combatienteOrcoMankrik }.
	^ self orquestadorDeCombates!

!methodRemoval: OrquestadorDeCombates class #orquestadorParaCombateManoAManoConBando2Inmune stamp: 'rabg 4/21/2023 17:51:57'!
orquestadorParaCombateManoAManoConBando2Inmune	
	
	self prepararCombatientes.
	self combatienteOrcoOlgra equiparEspada.
	self establecerCombateEntreBando1: {self combatienteHumanoArthas } contraBando2: { self combatienteOrcoOlgra }.
	^ self orquestadorDeCombates!

!methodRemoval: OrquestadorDeCombates class #orquestadorParaCombateOrcosVsArthas stamp: 'rabg 4/21/2023 17:51:57'!
orquestadorParaCombateOrcosVsArthas
	self prepararCombatientes.
	self establecerCombateEntreBando1: {self combatienteOrcoOlgra. self combatienteOrcoMankrik } contraBando2: { self combatienteHumanoArthas }.
	^ self orquestadorDeCombates!

!methodRemoval: OrquestadorDeCombates class #orquestadorParaCombateOrcosVsArthasConFocoEnElMasSano stamp: 'rabg 4/21/2023 17:51:57'!
orquestadorParaCombateOrcosVsArthasConFocoEnElMasSano	
	
	self prepararCombatientes.
	self combatienteHumanoArthas focalizarEnElMasSano. 
	self establecerCombateEntreBando1: { self combatienteOrcoOlgra. self combatienteOrcoMankrik } contraBando2: {self combatienteHumanoArthas }. 
	^ self orquestadorDeCombates!

!methodRemoval: OrquestadorDeCombates class #orquestadorParaCombateOrcosVsArthasInmuneYFocoEnElMasHerido stamp: 'rabg 4/21/2023 17:51:57'!
orquestadorParaCombateOrcosVsArthasInmuneYFocoEnElMasHerido	
	
	self prepararCombatientes.
	self combatienteHumanoArthas atacarA: self combatienteOrcoOlgra.
	self combatienteHumanoArthas equiparConArmaduraDeMetal. 
	self combatienteHumanoArthas focalizarEnElMasHerido. 
	self establecerCombateEntreBando1: { self combatienteOrcoOlgra. self combatienteOrcoMankrik } contraBando2: {self combatienteHumanoArthas }.
	^ self orquestadorDeCombates!

!methodRemoval: OrquestadorDeCombates class #prepararCombatientes stamp: 'rabg 4/21/2023 17:51:57'!
prepararCombatientes

	self combatienteHumanoArthas prepararseParaElCombate. 
	self combatienteOrcoOlgra prepararseParaElCombate.
	self combatienteOrcoMankrik prepararseParaElCombate. !

OrquestadorDeCombatesTest
	collaboratorNames: 'bando1 bando2 orquestador'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/21/2023 17:52:14'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2 orquestador'!

!classDefinition: #OrquestadorDeCombatesTest category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/21/2023 17:52:14'!
DenotativeObject subclass: #OrquestadorDeCombatesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/21/2023 17:52:14'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2 orquestador'!
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:52:32' prior: 50611409!
orquestadorDeCombates
	
	^OrquestadorDeCombates .! !

OrquestadorDeCombatesTest
	collaboratorNames: 'bando1 bando2'
	in: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/21/2023 17:52:38'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2'!

!classDefinition: #OrquestadorDeCombatesTest category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/21/2023 17:52:39'!
DenotativeObject subclass: #OrquestadorDeCombatesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CombatientesFantasticosPaso2'!

!classDefinition: 'OrquestadorDeCombatesTest class' category: 'CombatientesFantasticosPaso2' stamp: 'rabg 4/21/2023 17:52:39'!
OrquestadorDeCombatesTest class
	instanceVariableNames: 'bando1 bando2'!
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:53:13' prior: 50613025!
assertElResultadoIndicaQueGanoElBando1: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^self orquestadorDeCombates assertElResultadoIndicaQueGanoElBando1: resultadoDeUnCombate alcanzadaLaRonda: unNumeroDeRondaEsperado .! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:53:21' prior: 50613014!
assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^self orquestadorDeCombates assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate alcanzadaLaRonda: unNumeroDeRondaEsperado .! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:56:53'!
assertElResultadoIndicaQueGanoNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^self orquestadorDeCombates assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate alcanzadaLaRonda: unNumeroDeRondaEsperado .! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:57:05' prior: 50613003!
assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^self orquestadorDeCombates assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate alcanzadaLaRonda: unNumeroDeRondaEsperado .! !

!methodRemoval: OrquestadorDeCombatesTest class #assertElResultadoIndicaQueGanoNoHayGanador:alcanzadaLaRonda: stamp: 'rabg 4/21/2023 17:57:09'!
assertElResultadoIndicaQueGanoNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^self orquestadorDeCombates assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate alcanzadaLaRonda: unNumeroDeRondaEsperado .!
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:58:11' prior: 50611398!
establecerCombateEntreBando1: unBando1 contraBando2: unBando2
	self orquestadorDeCombates establecerCombateEntreBando1: unBando1 contraBando2: unBando2 .! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:58:45' prior: 50615844!
establecerCombateEntreBando1: unBando1 contraBando2: unBando2
	(self orquestadorDeCombates) establecerCombateEntreBando1: unBando1 contraBando2: unBando2 .! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 17:59:28' prior: 50614479!
desarrollarDuranteRondas: unasRondas
	self orquestadorDeCombates desarrollarDuranteRondas: unasRondas .! !

!methodRemoval: OrquestadorDeCombates class #orquestadorDeCombates stamp: 'rabg 4/21/2023 17:59:45'!
orquestadorDeCombates
	
	^self.!
!ResultadoDeUnCombate class methodsFor: 'asserts' stamp: 'rabg 4/21/2023 18:01:01'!
assertElResultadoIndicaQueGanoElBando1: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((ganador = 'Bando 1') & (rondas = unNumeroDeRondaEsperado)).! !
!ResultadoDeUnCombate class methodsFor: 'asserts' stamp: 'rabg 4/21/2023 18:01:06'!
assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((ganador = 'Bando 2') & (rondas = unNumeroDeRondaEsperado)).! !
!ResultadoDeUnCombate class methodsFor: 'asserts' stamp: 'rabg 4/21/2023 18:01:20'!
assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((ganador = 'Indeterminado') & (rondas = unNumeroDeRondaEsperado)).! !

!methodRemoval: OrquestadorDeCombates class #assertElResultadoIndicaQueGanoElBando1:alcanzadaLaRonda: stamp: 'rabg 4/21/2023 18:01:33'!
assertElResultadoIndicaQueGanoElBando1: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((resultadoDeUnCombate ganadorDelCombate = 'Bando 1') & (resultadoDeUnCombate rondasDisputadas = unNumeroDeRondaEsperado)).!

!methodRemoval: OrquestadorDeCombates class #assertElResultadoIndicaQueNoHayGanador:alcanzadaLaRonda: stamp: 'rabg 4/21/2023 18:01:37'!
assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((resultadoDeUnCombate ganadorDelCombate = 'Indeterminado') & (resultadoDeUnCombate rondasDisputadas = unNumeroDeRondaEsperado)).!

!methodRemoval: OrquestadorDeCombates class #assertElResultadoIndicaQueGanoElBando2:alcanzadaLaRonda: stamp: 'rabg 4/21/2023 18:01:39'!
assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((resultadoDeUnCombate ganadorDelCombate = 'Bando 2') & (resultadoDeUnCombate rondasDisputadas = unNumeroDeRondaEsperado)).!
!ResultadoDeUnCombate class methodsFor: 'asserts' stamp: 'rabg 4/21/2023 18:03:26' prior: 50615881!
assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((self ganadorDelCombate = 'Bando 2') & (self rondasDisputadas = unNumeroDeRondaEsperado)).! !
!ResultadoDeUnCombate class methodsFor: 'asserts' stamp: 'rabg 4/21/2023 18:03:39' prior: 50615889!
assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^((self ganadorDelCombate = 'Indeterminado') & (self rondasDisputadas = unNumeroDeRondaEsperado)).! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 18:04:43' prior: 50615820!
assertElResultadoIndicaQueNoHayGanador: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^self resultadoDelCombate assertElResultadoIndicaQueNoHayGanador:  resultadoDeUnCombate alcanzadaLaRonda: unNumeroDeRondaEsperado .! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 18:04:56' prior: 50615785!
assertElResultadoIndicaQueGanoElBando1: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^self resultadoDelCombate assertElResultadoIndicaQueNoHayGanador:  resultadoDeUnCombate alcanzadaLaRonda: unNumeroDeRondaEsperado .! !
!OrquestadorDeCombatesTest class methodsFor: 'para completar' stamp: 'rabg 4/21/2023 18:04:57' prior: 50615797!
assertElResultadoIndicaQueGanoElBando2: resultadoDeUnCombate  alcanzadaLaRonda: unNumeroDeRondaEsperado

	^self resultadoDelCombate assertElResultadoIndicaQueNoHayGanador:  resultadoDeUnCombate alcanzadaLaRonda: unNumeroDeRondaEsperado .! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:08'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'rabg 4/21/2023 18:05:09'!
PASSED!
!CombatienteHumanoArthas class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/21/2023 18:05:27' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 7; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 10; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm0_1 | | temp0_2 |
	temp0_2 _ argm0_1 select: [ :argm0_3 |
		argm0_3 estaFueraDeCombate not ].
	temp0_2 detectMax: [ :argm1_3 |
		argm1_3 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!CombatienteOrcoMankrik class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/21/2023 18:05:27' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!CombatienteOrcoOlgra class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/21/2023 18:05:28' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.! !
!OrquestadorDeCombates class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/21/2023 18:05:28' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	bando2 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).! !
!OrquestadorDeCombatesTest class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/21/2023 18:05:28' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	bando2 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).! !
!ResultadoDeUnCombate class methodsFor: '--** private fileout/in **--' stamp: 'rabg 4/21/2023 18:05:28' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	ganador := 'Bando 2'.
	rondas := 4.! !

!methodRemoval: CombatienteHumanoArthas class #initializeCollaboratorsFromFile stamp: 'rabg 4/21/2023 18:05:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 7; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 10; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteHumanoArthas; instVarAt: 2 put: '[ :argm0_1 | | temp0_2 |
	temp0_2 _ argm0_1 select: [ :argm0_3 |
		argm0_3 estaFueraDeCombate not ].
	temp0_2 detectMax: [ :argm1_3 |
		argm1_3 puntosDeVida ]. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorAgilidad := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: CombatienteOrcoMankrik class #initializeCollaboratorsFromFile stamp: 'rabg 4/21/2023 18:05:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoMankrik; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: CombatienteOrcoOlgra class #initializeCollaboratorsFromFile stamp: 'rabg 4/21/2023 18:05:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	enemigos := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	puntosDeVida := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAInfligir := (SimpleMeasure basicNew instVarAt: 1 put: 2; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	dañoAAbsorber := (SimpleMeasure basicNew instVarAt: 1 put: 0; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	estrategia := ((SerializableBlockClosure basicNew instVarAt: 1 put: CombatienteOrcoOlgra; instVarAt: 2 put: '[ :argm4_1 |
	argm4_1 anyOne. ]'; instVarAt: 3 put: #(); yourself) asEvaluable).
	bonoPorFuerza := (SimpleMeasure basicNew instVarAt: 1 put: 1; instVarAt: 2 put: (BaseUnit basicNew instVarAt: 1 put: 'puntosDeVida'; instVarAt: 2 put: 'puntosDeVidas'; instVarAt: 3 put: 'pv'; yourself); yourself).
	distraido := False.!

!methodRemoval: OrquestadorDeCombates class #initializeCollaboratorsFromFile stamp: 'rabg 4/21/2023 18:05:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	bando2 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).!

!methodRemoval: OrquestadorDeCombatesTest class #initializeCollaboratorsFromFile stamp: 'rabg 4/21/2023 18:05:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	bando1 := ((Array new: 1) at: 1 put: CombatienteHumanoArthas; yourself).
	bando2 := ((Array new: 2) at: 1 put: CombatienteOrcoOlgra; at: 2 put: CombatienteOrcoMankrik; yourself).!

!methodRemoval: ResultadoDeUnCombate class #initializeCollaboratorsFromFile stamp: 'rabg 4/21/2023 18:05:28'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	ganador := 'Bando 2'.
	rondas := 4.!

----QUIT----(21 April 2023 18:22:53) CuisUniversity-5706.image priorSource: 9064263!